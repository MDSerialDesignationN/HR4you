@using HR4You.Model.Base
@using Microsoft.JSInterop
@using HR4You.Model.Base.Pagination
@using Newtonsoft.Json
@rendermode InteractiveServer

<div class="component-search @(Options1.Length == 0 && Options2.Length == 0 ? "d-none" : "")">

    <div class="searchBar">
        @if (Options1.Length != 0)
        {
            <button class="button-option" @onclick="ToggleFilterOptions">
                <i class="fa-solid fa-filter"></i>
            </button>
        }
        @if (Options2.Length != 0)
        {
            <button class="button-option" @onclick="ToggleFilterOptionsAdmin">
                <i class="fa-solid fa-user-tie"></i>
            </button>
        }
        <button class="button-search" id="Submit" type="submit" value="Search" @onclick="Filter">Search<i class="fa-solid fa-magnifying-glass"></i></button>
    </div>
    @if (Options1 != null)
    {
        <div class="filter-popup @(!showFilterOptions ? "d-none" : "")">
            <div class="filter-wrapper">
                <div class="FilterOptions @(showFilterOptions ? "active" : "")">
                    @foreach (var option in Options1)
                    {
                        <div class="OptionRow">
                            <span>@((MarkupString)option.Icon)@option.Name</span>
                            @if (option.InputType == "select" && option.Options != null)
                            {
                                <select name="@option.Name" @ref="values[option.Name]">
                                    <option value="">None</option>
                                    @foreach (var opt in option.Options)
                                    {
                                        <option value="@opt">@opt</option>
                                    }
                                </select>
                            }
                            else
                            {
                                <input type="@option.InputType" name="@option.Name" @ref="values[option.Name]" />
                            }
                        </div>
                    }
                </div>
                <button class="btn btn-danger" @onclick="ToggleFilterOptions">Close</button>
            </div>

        </div>
    }
    @if (Options2 != null)
    {
        <div class="filter-popup @(!showFilterOptionsAdmin ? "d-none" : "")">
            <div class="filter-wrapper">
                <div class="FilterOptions @(showFilterOptionsAdmin ? "active" : "")">
                    @foreach (var option in Options2)
                    {
                        <div class="OptionRow">
                            <span>@((MarkupString)option.Icon)@option.Name</span>
                            @if (option.InputType == "select" && option.Options != null)
                            {
                                <select name="@option.Name" @ref="values[option.Name]">
                                    <option value="">None</option>
                                    @foreach (var opt in option.Options)
                                    {
                                        <option value="@opt">@opt</option>
                                    }
                                </select>
                            }
                            else
                            {
                                <input type="@option.InputType" name="@option.Name" @ref="values[option.Name]" />
                            }
                        </div>
                    }
                </div>
                <button class="btn btn-danger" @onclick="ToggleFilterOptionsAdmin">Close</button>
            </div>

        </div>
    }

</div>

@code {
    [Parameter] public FilterOption[] Options1 { get; set; } = Array.Empty<FilterOption>();
    [Parameter] public FilterOption[] Options2 { get; set; } = Array.Empty<FilterOption>();
    [Parameter] public string ApiEndpoint { get; set; }

    private bool showFilterOptions = false;
    private bool showFilterOptionsAdmin = false;

    private Dictionary<string, ElementReference> values = new Dictionary<string, ElementReference>();

    [Inject] private IJSRuntime JS { get; set; }

    private void ToggleFilterOptions()
    {
        showFilterOptions = !showFilterOptions;
        if (showFilterOptions)
        {
            showFilterOptionsAdmin = false; // Deaktiviert den Admin-Filter
        }
    }

    private void ToggleFilterOptionsAdmin()
    {
        showFilterOptionsAdmin = !showFilterOptionsAdmin;
        if (showFilterOptionsAdmin)
        {
            showFilterOptions = false; // Deaktiviert den Filter 1
        }
    }

    private async Task Filter()
    {
        var columnFilters = new List<ColumnFilter>();

        foreach (var element in values)
        {
            var value = await JS.InvokeAsync<string>("getElementValue", element.Value);
            if (!string.IsNullOrWhiteSpace(value))
            {
                columnFilters.Add(
                    new ColumnFilter { ColumnName = element.Key, Value = value }
                );
            }
        }
        // var columnFiltersDictionary = ConvertColumnFiltersToDictionary(columnFilters);

        var Parameters = new Dictionary<string, string> {
            { "columnFilters", JsonConvert.SerializeObject(columnFilters) }
        };


        var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, ApiEndpoint, Parameters, LocalUserStorage.UserInfo.AuthToken);
        var response = await HttpClient.SendAsync(request);

        var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
    }

    // private List<ColumnFilter> ConvertColumnFilters(List<ColumnFilter> columnFilters)
    // {
    //     var filterList = new List<ColumnFilter>();
    //     try
    //     {
    //         foreach(var filter in columnFilters){
    //             filterList.Add(new ColumnFilter { ColumnName = filter.ColumnName, Value = filter.Value });
        //         }



    //     }
    //     catch (Exception ex)
    //     {

    //         Console.WriteLine();
    //     }
    //     return filterList;


    // }

}
