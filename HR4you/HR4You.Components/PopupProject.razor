@inject HttpClient HttpClient
@using System.Security.Cryptography
@using Microsoft.AspNetCore.WebUtilities
@using HR4You.Model.Base.Pagination
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<div class="toast-container position-absolute @showClass" data-bs-autohide="true" data-bs-delay="5000"
     style="left: 50%;
    position: fixed;
    transform: translate(-50%, 0px);
    z-index: 9999;
    width: 80%;">

    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true"
         style="left: 50%;
        position: fixed;
        transform: translate(-50%, 0px);
        z-index: 9999;
        width: 80%;
        background-color:white;">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <EditForm Model="project" OnValidSubmit="Submit">
            <DataAnnotationsValidator />
            <ValidationSummary />
        
            <div class="toast-body" style="padding: 20px;">
                <div class="container">
                    <div class="row">
                        <!-- Project Number and State -->
                        <div class="col-sm-4">
                            <label>Project Number</label>
                            <InputNumber @bind-Value="project.ProjectNumber" class="form-control mb-2"></InputNumber>
                            
                            <label>State</label>
                            <InputSelect @bind-value="project.State" class="form-select">
                                @foreach (var state in states)
                                {
                                    <option value="@state">@state.ToString()</option>
                                }
                            </InputSelect>
                        </div>

                        <!-- Name and Customer -->
                        <div class="col-sm-4">
                            <label>Name</label>
                            <InputText @bind-Value="project.Name" class="form-control mb-2"></InputText>

                            <label>Customer</label>
                            <InputSelect @bind-Value="project.CustomerId" class="form-select">
                                @foreach (var customer in customersToShow)
                                {
                                    <option value="@customer.Id">@customer.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <!-- Description -->
                        <div class="col-sm-8">
                            <label>Description</label>
                            <InputTextArea @bind-Value="project.Description" rows="4" class="form-control mb-2" />
                        </div>
                    </div>

                    <!-- Buttons -->
                    <div class="row">
                        <div class="col-sm-4">
                            <button type="submit" class="btn btn-dark">Save</button>
                            <button type="button" class="btn btn-outline-secondary" @onclick="Close">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
        </div>
    </div>

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter] 
    public EventCallback OnProjectUpdated { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public string? GivenId { get; set; }

    private const string RefCustomerUrl = "http://localhost:5001/api/master-data/customer/get-all-paged";
    
    Project project = new Project();

    ProjectState[] states = new[] { ProjectState.Open, ProjectState.Closed };

    PagedResponseKeySet<Customer> customers;
    List<Customer> customersToShow = [];
    bool isEdit = false;

    private async Task getCustomers()
    {
        customers = await HttpClient.GetFromJsonAsync<PagedResponseKeySet<Customer>>(RefCustomerUrl);
        customersToShow = customers.Data;
        /*var param = new Dictionary<string, string>
        {
            {"addDeleted", "false"},
            {"reference", "0"},
            {"pagesize", "10"}
        };

        string methodName = "http://localhost:5001/api/master-data/customer/get-all-paged";
        methodName = QueryHelpers.AddQueryString(methodName, param);

        var request = new HttpRequestMessage(HttpMethod.Get, methodName);

        var response = await HttpClient.SendAsync(request);

        var json = response.Content.ReadAsStringAsync().Result;

        customers = JsonConvert.DeserializeObject<PagedResponseOffset<Customer>>(json);*/
    }
    
    
    
    public async Task Show(string requestURL, string headerText)
    {
        HeaderText = headerText;
        //customer = await HttpClient.GetFromJsonAsync<Customer>(requestURL + GivenId);
        IsVisible = true;
        isEdit = true;
        await getCustomers();
        StateHasChanged();
    }

    public async Task ShowOverview(string requestURL, string headerText)
    {
        HeaderText = headerText;
        //customer = await HttpClient.GetFromJsonAsync<Customer>(requestURL + GivenId);
        IsVisible = true;
        isEdit = false;
        await getCustomers();
        StateHasChanged();
    }

    private async Task Submit()
    {
        var editURL = "http://localhost:5001/api/master-data/project/edit?Id=";
        var createURL = "http://localhost:5001/api/master-data/project/create";

        if (isEdit == true)
        {
            try
            {
                var response = await HttpClient.PostAsJsonAsync(editURL + GivenId, project);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Entry saved successfully.");

                    if (OnProjectUpdated.HasDelegate)
                    {
                        await OnProjectUpdated.InvokeAsync(); // Notify the parent component
                    }
                    else
                    {
                        Console.WriteLine("OnProjectUpdated has no delegate assigned.");
                    }
                    Close();
                }
                else
                {
                    Console.WriteLine("Error occurred while saving the Entry: " + response.ReasonPhrase);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception occurred: " + ex.Message);
            }
        }
        else if (isEdit == false)
        {
            var response = await HttpClient.PostAsJsonAsync(createURL, project);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Entry saved successfully.");
                Close();
            }
        }
    }

    private async Task Close()
    {
        HeaderText = string.Empty;
        GivenId = null;
        IsVisible = false;
        StateHasChanged();
    }
}