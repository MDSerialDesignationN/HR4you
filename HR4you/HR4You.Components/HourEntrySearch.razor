@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient HttpClient

<div class="searchAndFilter">
    <button title="Filteroptionen" id="FilterOptions" @onclick="ToggleFilterOptions"><i class="fa-solid fa-filter"></i></button>
    <button title="Admin Filteroptionen" id="FilterOptions" @onclick="ToggleFilterOptionsAdmin"><i class="fa-solid fa-user-tie"></i></button>

    <input id="Search" type="text" @bind="description" @bind:event="oninput" @onkeypress="HandleKeyPress" placeholder="Search" />
    <button id="Submit" type="submit" value="Search" @onclick="FilterEntries"><i class="fa-solid fa-magnifying-glass"></i></button>
</div>
<div class="FilterOptions @(showFilterOptions ? "active" : "")">
    <div class="OptionRow">
        <span><i class="fa-solid fa-calendar-days color-[blue]"></i>Datum</span><input type="date" name="Date" @bind="date" @bind:event="oninput" />
    </div>
    <div class="OptionRow">
        <span><i class="fa-regular fa-clock"></i>StartZeit</span><input type="time" name="StartDate" @bind="startTime" @bind:event="oninput" />
    </div>
    <div class="OptionRow">
        <span><i class="fa-regular fa-clock"></i>EndZeit</span><input type="time" name="EndDate" @bind="endTime" @bind:event="oninput" />
    </div>
    <div class="OptionRow">
        <span><i class="fa-solid fa-timeline"></i>Dauer</span><input type="number" name="Duration" @bind="duration" @bind:event="oninput" />
    </div>
    <div class="OptionRow">
        <span><i class="fa-solid fa-tasks"></i>Activity Type</span>
        <select @bind="selectedActivityType">
            <option value="">Alle</option>
            @foreach (var type in Enum.GetValues<ActivityType>())
            {
                <option value="@type">@type</option>
            }
        </select>
    </div>
</div>
<div class="FilterOptions @(showFilterOptionsAdmin ? "active" : "")">
    <div class="OptionRow">
        <span><i class="fa-solid fa-id-card"></i>User Id</span><input type="string" name="UserId" @bind="userId" @bind:event="oninput" />
    </div>
    <div class="OptionRow">
        <span><i class="fa-solid fa-diagram-project"></i>Project</span><input type="string" name="Project" @bind="project" @bind:event="oninput" />
    </div>
    <div class="OptionRow">
        <span><i class="fa-solid fa-tag"></i>Tag</span><input type="string" name="Tag" @bind="tag" @bind:event="oninput" />
    </div>
    <div class="OptionRow">
        <span><i class="fa-solid fa-mug-hot"></i>Holiday</span><input type="checkbox" name="Holiday" @bind="holiday" @bind:event="oninput" />
    </div>
    <div class="OptionRow">
        <span><i class="fa-solid fa-money-bill"></i>Billable</span><input type="checkbox" name="Billable" @bind="billable" @bind:event="oninput" />
    </div>
    <div class="OptionRow">
        <span><i class="fa-solid fa-trash"></i>Deleted</span><input type="checkbox" name="Deleted" @bind="deleted" @bind:event="oninput" />
    </div>
</div>

@code {
    [Parameter] public List<HourEntry> Entries { get; set; }
    [Parameter] public EventCallback<List<HourEntry>> OnFilterChanged { get; set; }

    private string? description;
    private DateOnly? date;
    private TimeOnly? startTime;
    private TimeOnly? endTime;
    private int? duration;
    private ActivityType? selectedActivityType;
    private string? userId;
    private string? project;
    private string? tag;
    private bool holiday;
    private bool billable;
    private bool deleted;
    private bool showFilterOptions = false;
    private bool showFilterOptionsAdmin = false;

    private void FilterEntries()
    {
        var filteredEntries = Entries.Where(e =>
            (string.IsNullOrWhiteSpace(description) || (e.Description != null && e.Description.Contains(description, StringComparison.OrdinalIgnoreCase))) &&
            (!date.HasValue || e.Date == date.Value) &&
            (!startTime.HasValue || e.StartTime >= startTime.Value) &&
            (!endTime.HasValue || e.EndTime <= endTime.Value) &&
            (!duration.HasValue || e.Duration <= duration.Value) &&
            (!selectedActivityType.HasValue || e.Type == selectedActivityType.Value) &&
            (string.IsNullOrWhiteSpace(userId) || (e.UserId != null && e.UserId.Contains(userId, StringComparison.OrdinalIgnoreCase))) &&
            (string.IsNullOrWhiteSpace(project) || (e.ProjectId != null && e.ProjectId.ToString().Contains(project, StringComparison.OrdinalIgnoreCase))) &&
            (string.IsNullOrWhiteSpace(tag) || (e.TagId != null && e.TagId.ToString().Contains(tag, StringComparison.OrdinalIgnoreCase))) &&
            (!holiday || e.IsHoliday) &&
            (!billable || e.IsBillable) &&
            (!deleted || e.Deleted)
        ).ToList();

        OnFilterChanged.InvokeAsync(filteredEntries);
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            FilterEntries();
        }
    }

    private void ToggleFilterOptions()
    {
        showFilterOptions = !showFilterOptions;
    }

    private void ToggleFilterOptionsAdmin()
    {
        showFilterOptionsAdmin = !showFilterOptionsAdmin;
    }
}