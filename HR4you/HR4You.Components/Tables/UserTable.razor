@using HR4You.Components.Popups
@using HR4you.Security
@rendermode InteractiveServer
@inject HttpClient HttpClient

<PopupUser @ref="popupRef" OnUserUpdated="RefreshTable" />

<table class="blueTable">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Username</th>
            <th>Roles</th>
            <th>Role Groups</th>
            <th>Is Deleted</th>
            <th>Actions</th>

        </tr>
    </thead>
    <tbody>
        @foreach (var entry in entries)
        {

            <tr>
                <td>@entry.FirstName</td>
                <td>@entry.LastName</td>
                <td>@entry.UserName</td>
                <td>@string.Join(", ", @entry.Roles.Select(role => role.Replace("UserRole_", "")))</td>
                <td>@string.Join(", ", @entry.RoleGroups.Select(roleGroup => roleGroup.Replace("HR_UserRoleGroup_", "")))</td>
                <td>@(entry.Deleted ? "Yes" : "No")</td>
                <td class="table-action">
                    @if (entry.Deleted == true)
                    {
                        <button type="button" class="btn btn-danger" @onclick="(() => Reactivate(entry.Id))"><i class="fa fa-rotate-right"></i></button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-danger" @onclick="(() => DeleteEntry(entry.Id))"><i class="fa fa-trash"></i></button>
                    }
                    <button type="button" class="btn btn-primary" @onclick="(() => EditEntry(entry.Id))"><i class="fa fa-pencil"></i></button>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {

    [Parameter]
    public List<UserInfo> entries { get; set; }

    private PopupUser popupRef;

    [Parameter]
    public EventCallback OnUserUpdated2 { get; set; }

    public string unDeleteURL = "http://localhost:5001/api/auth/un-delete-user?id=";

    UserInfo emptyBody = new UserInfo();


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && popupRef != null)
        {
            popupRef.OnUserUpdated = EventCallback.Factory.Create(this, RefreshTable);
        }
    }

    public string RequestURLEdit = "http://localhost:5001/api/auth/get-user?Id=";
    public string RequestURLDelete = "http://localhost:5001/api/auth/delete-user?Id=";

    private void EditEntry(string GivenId)
    {
        popupRef.ShowEdit(GivenId, RequestURLEdit, "Edit User");
    }

    private async Task DeleteEntry(string GivenId)
    {
        var response = await HttpClient.PostAsJsonAsync<UserInfo>(RequestURLDelete + GivenId, emptyBody);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("User reactivated successfully.");
            RefreshTable();
        }
        else
        {
            Console.WriteLine("Error occurred while reactivating the user: " + response.ReasonPhrase);
        }
    }

    private async Task Reactivate(string GivenId)
    {
        var response = await HttpClient.PostAsJsonAsync(unDeleteURL + GivenId, emptyBody);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("User reactivated successfully.");
            RefreshTable();
        }
        else
        {
            Console.WriteLine("Error occurred while reactivating the user: " + response.ReasonPhrase);
        }
    }

    private void CreateUser()
    {
        popupRef.ShowCreate("Add User");
        RefreshTable();
    }

    private async Task RefreshTable()
    {
        Console.WriteLine("RefreshTable() was called");
        if (OnUserUpdated2.HasDelegate)
        {
            await OnUserUpdated2.InvokeAsync(); // Notify the parent component
        }
        else
        {
            Console.WriteLine("no delegate assigned.");
        }
    }


}
