@using HR4You.Model.Base.Pagination
@inject HttpClient HttpClient
@typeparam TItem

<div class="pagination flex flex-row gap-3 justify-center">
    <button @onclick="previousPage" class="flex flex-row gap-2 transition-all duration-300 bg-gray-200 hover:bg-gray-300 items-center border border-2 border-[#c1c1c1] rounded-[10px] p-1">
        <i class="fa-solid fa-backward"></i> Previous-page
    </button>
    <button @onclick="nextPage" class="flex flex-row gap-2 transition-all duration-300 bg-gray-200 hover:bg-gray-300 items-center border border-2 border-[#c1c1c1] rounded-[10px] p-1">
        Next-page <i class="fa-solid fa-forward"></i>
    </button>
</div>

@code {
    [Parameter] public PagedResponseKeySet<TItem>? entries { get; set; }
    [Parameter] public EventCallback<PagedResponseKeySet<TItem>> OnPageChanged { get; set; }
    [Parameter] public string ApiEndpoint { get; set; } = string.Empty;

    private const int pageSize = 10;

    private async Task previousPage()
    {
        try
        {
            var newEntries = await HttpClient.GetFromJsonAsync<PagedResponseKeySet<TItem>>($"{ApiEndpoint}?reference={(entries.Reference - 1) - pageSize}");
            OnPageChanged.InvokeAsync(newEntries);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }
    }

    private async Task nextPage()
    {
        try
        {
            var newEntries = await HttpClient.GetFromJsonAsync<PagedResponseKeySet<TItem>>($"{ApiEndpoint}?reference={(entries.Reference - 1) + pageSize}");
            if (newEntries?.Data.Count == 0)
            {
                newEntries = await HttpClient.GetFromJsonAsync<PagedResponseKeySet<TItem>>($"{ApiEndpoint}?reference=0");

            }
            OnPageChanged.InvokeAsync(newEntries);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }
    }
}