@rendermode InteractiveServer
@inject HttpClient HttpClient

@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<div class="toast-container position-absolute @showClass" data-bs-autohide="true" data-bs-delay="50000"
     style="left: 50%; position: fixed; transform: translate(-50%, 0px); z-index: 9999; width: 80%; box-shadow: rgba(0, 0, 0, 0.56) 0px 22px 70px 4px;">

    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true"
         style="left: 50%; position: fixed; transform: translate(-50%, 0px); z-index: 9999; width: 80%; background-color:white; box-shadow: rgba(0, 0, 0, 0.56) 0px 22px 70px 4px;">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <EditForm Model="user" OnValidSubmit="Submit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="toast-body" style="padding: 20px;">
                <div class="container">
                    <div class="row">
                        <!-- FirstName and Roles -->
                        <div class="col-sm-4">
                            <label>First Name</label>
                            <InputText @bind-Value="user.FirstName" class="form-control mb-2" />
                        </div>

                        <!-- LastName and RoleGroups -->
                        <div class="col-sm-4">
                            <label>Last Name</label>
                            <InputText @bind-Value="user.LastName" class="form-control mb-2" />
                        </div> 

                        <!-- UserName -->
                        <div class="col-sm-4">
                            <label>Username</label>
                            <InputText @bind-Value="user.UserName" class="form-control mb-2" />                           
                        </div>
                    </div>

                    <!-- Buttons -->
                    <div class="row">
                        <div class="col-sm-4">
                            <button type="submit" class="btn btn-dark">Save</button>
                            <button type="button" class="btn btn-outline-secondary" @onclick="Close">Cancel</button> 
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public EventCallback OnUserUpdated { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public string? GivenId { get; set; }

    public string editURL = "http://localhost:5001/api/auth/change-user-data";
    public string createURL = "http://localhost:5001/api/auth/add-new-user";

    UserInfo user = new UserInfo();

    //string newUserCreation = { };

    bool isEdit = false;

    async public Task ShowEdit(string givenId, string requestURL, string headerText)
    {
        HeaderText = headerText;
        GivenId = givenId.ToString();
        user = await HttpClient.GetFromJsonAsync<UserInfo>(requestURL + GivenId);
        IsVisible = true;
        isEdit = true;
        StateHasChanged();
    }

    async public Task ShowCreate(string headerText)
    {
        HeaderText = headerText;
        IsVisible = true;
        isEdit = false;
        StateHasChanged();
    }

    private async Task Submit()
    {
        if (isEdit == true)
        {
            try
            {
                var response = await HttpClient.PostAsJsonAsync(editURL, user);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("User saved successfully.");

                    if (OnUserUpdated.HasDelegate)
                    {
                        await OnUserUpdated.InvokeAsync(); // Notify the parent component
                    }
                    else
                    {
                        Console.WriteLine("no delegate assigned.");
                    }

                    Close();
                }
                else
                {
                    Console.WriteLine("Error occurred while saving the user: " + response.ReasonPhrase);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception occurred: " + ex.Message);
            }
        }
        else if (isEdit == false)
        {
            var newUserCreation = new
            {
                UserName = user.UserName,
                FirstName = user.FirstName,
                LastName = user.LastName,
                Password = "1234",
                //RoleGroups = "HR_UserRoleGroup_Authenticated"
                RoleGroups = new string[] { "HR_UserRoleGroup_SysManagement", "HR_UserRoleGroup_Admin", "HR_UserRoleGroup_Authenticated" }
            };

            var content = new StringContent(JsonSerializer.Serialize(newUserCreation), Encoding.UTF8, "application/json");  
            
            Console.WriteLine(newUserCreation);

            var response = await HttpClient.PostAsJsonAsync(createURL, content);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("User created successfully.");

                Close();
            }
            else
            {
                Console.WriteLine("Error occurred while creating the user: " + response.ReasonPhrase);
            }
        }
    }

    private void Close()
    {
        user = new UserInfo();
        HeaderText = string.Empty;
        GivenId = null; 
        IsVisible = false;

        StateHasChanged();
    }
}
