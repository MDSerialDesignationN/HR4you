@inject HttpClient HttpClient

@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<div class="toast-container position-absolute @showClass" data-bs-autohide="true" data-bs-delay="5000"
     style="left: 50%;
    position: fixed;
    transform: translate(-50%, 0px);
    z-index: 9999;
    width: 80%;">

    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true"
         style="left: 50%;
        position: fixed;
        transform: translate(-50%, 0px);
        z-index: 9999;
        width: 80%;
        background-color:white;">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <div class="toast-body" style="padding: 20px;">
            <div class="container">
                <EditForm Model="tag" OnValidSubmit="Submit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="toast-body" style="padding: 20px;">
                        <div class="container">
                            <div class="row">
                                <!-- Name-->
                                <div class="col-sm-4">
                                    <label>Tag Name</label>
                                    <InputText @bind-Value="tag.Name" class="form-control mb-2"></InputText>
                                </div>

                                <!-- Buttons -->
                                <div class="row">
                                    <div class="col-sm-4">
                                        <button type="submit" class="btn btn-dark">Save</button>
                                        <button type="button" class="btn btn-outline-secondary" @onclick="Close">Cancel</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter] 
    public EventCallback OnTagUpdated { get; set; }
    
    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public string? GivenId { get; set; }

    Tag tag = new Tag();

    bool isEdit = false;

    public async Task Show(string requestURL, string headerText)
    {
        HeaderText = headerText;
        //customer = await HttpClient.GetFromJsonAsync<Customer>(requestURL + GivenId);
        IsVisible = true;
        StateHasChanged();
    }

    public async Task ShowOverview(string headerText)
    {
        HeaderText = headerText;
        //customer = await HttpClient.GetFromJsonAsync<Customer>(requestURL + GivenId);
        IsVisible = true;
        StateHasChanged();
    }

    private async Task Submit()
    {
        var createURL = "http://localhost:5001/api/master-data/tag/create";
        var editURL = "http://localhost:5001/api/master-data/tag/edit?Id=";

        if (isEdit == true)
        {
            try
            {
                var response = await HttpClient.PostAsJsonAsync(editURL + GivenId, tag);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Entry saved successfully.");

                    if (OnTagUpdated.HasDelegate)
                    {
                        await OnTagUpdated.InvokeAsync(); // Notify the parent component
                    }
                    else
                    {
                        Console.WriteLine("OnTagUpdated has no delegate assigned.");
                    }
                    Close();
                }
                else
                {
                    Console.WriteLine("Error occurred while saving the Entry: " + response.ReasonPhrase);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception occurred: " + ex.Message);
            }
        }
        else if (isEdit == false)
        {
            var response = await HttpClient.PostAsJsonAsync(createURL, tag);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Entry saved successfully.");
                Close();
            }
        }
    }

    private void Close()
    {
        HeaderText = string.Empty;
        GivenId = null;
        IsVisible = false;
        StateHasChanged();
    }
}