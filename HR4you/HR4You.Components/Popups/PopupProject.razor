@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<div class="toast-container position-absolute @showClass" data-bs-autohide="true" data-bs-delay="5000"
     style="left: 50%;
    position: fixed;
    transform: translate(-50%, 0px);
    z-index: 9999;
    width: 80%;">

    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true"
         style="left: 50%;
        position: fixed;
        transform: translate(-50%, 0px);
        z-index: 9999;
        width: 80%;
        background-color:white;">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        @*<EditForm Model="project" OnValidSubmit="Submit">
            <DataAnnotationsValidator />
            <ValidationSummary />
        
            <div class="toast-body" style="padding: 20px;">
                <div class="container">
                    <div class="row">
                        <!-- Date and Project-->
                        <div class="col-sm-4">
                            <label>Date</label>
                            <InputDate @bind-Value="project.ProjectNumber" class="form-control mb-2"></InputDate> 
                            
                            
                            
                        </div>

                        <!-- Start Time and Tag -->
                        <div class="col-sm-4">
                            <label>Start Time</label>
                            <InputDate Type="InputDateType.Time" @bind-Value="project.Name" class="form-control mb-2" />

                            <label>Tag</label>
                            <InputSelect @bind-Value="project.CustomerId" class="form-select">
                                @foreach (var customer in customers)
                                {
                                    <option value="@customer.Id">@customer.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <!-- EndTime -->
                        <div class="col-sm-4">
                            <label>End Time</label>
                            <InputDate Type="InputDateType.Time" @bind-Value="project.EndTime" class="form-control mb-2" />
                        </div>

                        <!-- Description -->
                        <div class="col-sm-8">
                            <label>Description</label>
                            <InputTextArea @bind-Value="project.Description" rows="4" class="form-control mb-2" />
                        </div>
                    </div>

                    <!-- Buttons -->
                    <div class="row">
                        <div class="col-sm-4">
                            <button type="submit" class="btn btn-dark">Save</button>
                            <button type="button" class="btn btn-outline-secondary" @onclick="Close">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>*@
        </div>
    </div>

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter] 
    public EventCallback OnProjectUpdated { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public string? GivenId { get; set; }

    Project project = new Project();

    List<Customer> customers = [];

    private async Task getCustomers()
    {
        
    }
    
    public async Task Show(string requestURL, string headerText)
    {
        HeaderText = headerText;
        //customer = await HttpClient.GetFromJsonAsync<Customer>(requestURL + GivenId);
        IsVisible = true;
        StateHasChanged();
    }

    public async Task ShowOverview(string requestURL, string headerText)
    {
        HeaderText = headerText;
        //customer = await HttpClient.GetFromJsonAsync<Customer>(requestURL + GivenId);
        IsVisible = true;
        StateHasChanged();
    }

    private async Task Submit()
    {
        
    }

    private async Task Close()
    {
        HeaderText = string.Empty;
        GivenId = null;
        IsVisible = false;
        StateHasChanged();
    }
}