@page "/Projects"
@using HR4You.Model.Base.Pagination
@using HR4You.Components.Other
@using HR4You.Components.Tables
@using Newtonsoft.Json
@using HR4You.Model.Base
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject HttpClient HttpClient

<PageTitle>Projects</PageTitle>
<div class="page-content min-h-[100vh] p-3 flex flex-col gap-2 select-none">

    <div class="flex flex-row justify-between">
        <h1 class="text-[2rem] font-bold flex flex-row gap-3 items-center"><i class="fa-solid fa-sheet-plastic"></i>Projects</h1>
    </div>

    <UserInfo></UserInfo>


    @if (PagedResponseOffset == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <div class="flex flex-row gap-2 items-center">
            <SearchComponent Options1="options1" Options2="options2"/>
            <div class="bg-gray-200 p-[5px] rounded-[5px] border border-1 border-[#c1c1c1] flex flex-row gap-1 justify-center items-center">
                <label for="showDeleted">Show Deleted</label>
                <input class="h-4 w-4" id="showDeleted" type="checkbox" checked="@addDeleted" @oninput="CheckboxChanged">
            </div>
        </div>

        <div class="table-wrapper overflow-auto">
            <ProjectsTable entries="PagedResponseOffset.Data" customerNames="customerNames" @ref="popupRef2" OnProjectUpdated2="RefreshTable2">
            </ProjectsTable>
        </div>

        <OffsetPagination entries="PagedResponseOffset" OnPageChanged="EventCallback.Factory.Create<PagedResponseOffset<Project>>(this, UpdateEntries)" Parameters="Parameters" ApiEndpoint=@GetAllProjectApiEndpoint/>
    }
</div>


@code {
    private const string ApiProjectEndpointRoute = "api/master-data/project/";
    private const string ApiCustomerEndpointRoute = "api/master-data/project/";
    private const string GetAllProjectApiEndpoint = $"{ApiProjectEndpointRoute}get-all-paged";
    private const string GetCustomerApiEndpoint = $"{ApiCustomerEndpointRoute}get";

    public PagedResponseOffset<Project>? PagedResponseOffset;
    public Dictionary<string, string> Parameters;

    //TODO create options
    public FilterOption[] options1 =
    [
    ];

    public FilterOption[] options2 =
    [
    ];

    public bool addDeleted;

    private ProjectsTable? popupRef2;

    public Dictionary<int, string> customerNames = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            addDeleted = false;
            await LoadProjects();
        }

        if (firstRender && popupRef2 != null)
        {
            popupRef2.OnProjectUpdated2 = EventCallback.Factory.Create(this, RefreshTable2);
        }
    }
    
    private void UpdateEntries(PagedResponseOffset<Project> newEntries)
    {
        PagedResponseOffset = newEntries;
    }

    private async Task LoadProjects()
    {
        var uniqueCustomerIds = new List<int>();

        try
        {
            await LocalUserStorage.Load();
            if (LocalUserStorage.UserInfo == null)
            {
                NavigationManager.NavigateTo(NavigationManager.BaseUri);
                return;
            }

            Parameters = new Dictionary<string, string>
            {
                { nameof(addDeleted), addDeleted.ToString() }
            };

            var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetAllProjectApiEndpoint, Parameters, LocalUserStorage.UserInfo.AuthToken);
            var response = await HttpClient.SendAsync(request);

            var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
            if (content != null) PagedResponseOffset = JsonConvert.DeserializeObject<PagedResponseOffset<Project>>(content);


            // Fetch customer names for all entries
            if (PagedResponseOffset != null)
                foreach (var entry in PagedResponseOffset.Data)
                {
                    if (!uniqueCustomerIds.Contains(entry.CustomerId))
                    {
                        uniqueCustomerIds.Add(entry.CustomerId);
                    }
                }

            foreach (var customerId in uniqueCustomerIds)
            {
                if (!customerNames.ContainsKey(customerId))
                {
                    var customer = await FetchCustomerAsync(customerId);
                    customerNames[customerId] = customer?.Name ?? "No Customer";
                }
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }
    }

    private async Task<Customer?> FetchCustomerAsync(int customerId)
    {
        try
        {
            await LocalUserStorage.Load();
            if (LocalUserStorage.UserInfo == null)
            {
                NavigationManager.NavigateTo(NavigationManager.BaseUri);
                return null;
            }

            Parameters = new Dictionary<string, string>
            {
                { "id", customerId.ToString() },
                { nameof(addDeleted), addDeleted.ToString() }
            };

            var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetCustomerApiEndpoint, Parameters, LocalUserStorage.UserInfo.AuthToken);
            var response = await HttpClient.SendAsync(request);

            var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
            if (content != null) return JsonConvert.DeserializeObject<Customer>(content)!;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching customer id {customerId} Error: {ex.Message}");
            return null;
        }

        return null;
    }

    private async Task CheckboxChanged()
    {
        if (addDeleted == false)
        {
            addDeleted = true;
        }
        else
        {
            addDeleted = false;
        }

        Parameters = new Dictionary<string, string>
        {
            { nameof(addDeleted), addDeleted.ToString() }
        };

        var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetAllProjectApiEndpoint, Parameters, LocalUserStorage.UserInfo!.AuthToken);
        var response = await HttpClient.SendAsync(request);

        var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
        if (content != null) PagedResponseOffset = JsonConvert.DeserializeObject<PagedResponseOffset<Project>>(content);

        StateHasChanged();
    }

    private async Task RefreshTable2()
    {
        Console.WriteLine("RefreshTable2() was called from Project");
        await LoadProjects();

        StateHasChanged();
    }

}