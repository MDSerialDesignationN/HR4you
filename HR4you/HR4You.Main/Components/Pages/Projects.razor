@page "/Projects"
@using HR4You.Model.Base.Pagination
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject IConfiguration Configuration

<PageTitle>Projects</PageTitle>

<h1>Projects</h1>

<label>Show Deleted</label>
<input type="checkbox" checked="@addDeleted" @oninput="CheckboxChanged">

@if (entries == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <ProjectsTable entries="entries.Data" customerNames="customerNames" @ref="popupRef2" OnProjectUpdated2="RefreshTable2">
    </ProjectsTable>
}


@code {
    private string HttpURL;

    public string RequestURL = "/api/master-data/project/get-all?addDeleted=";

    public bool addDeleted;

    private ProjectsTable popupRef2;

    public Dictionary<int, string> customerNames = new Dictionary<int, string>();
    public PagedResponseKeySet<Project> entries;

    public string RequestURLCustomer = "/api/master-data/customer/get?addDeleted=true&Id=";


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && popupRef2 != null)
        {
            popupRef2.OnProjectUpdated2 = EventCallback.Factory.Create(this, RefreshTable2);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //Get first value from appsettings.json "Urls"
        var urls = Configuration["Urls"];
        HttpURL = urls?.Split(';').FirstOrDefault();

        addDeleted = false;
        await LoadProjects();
    }

    private async Task<Customer> FetchCustomerAsync(int customerId)
    {
        try
        {
            return await HttpClient.GetFromJsonAsync<Customer>((HttpURL + RequestURLCustomer) + customerId);
        }
        catch
        {
            return null;
        }
    }

    private async Task LoadProjects()
    {
        List<int> uniqueCustomerIds = new List<int>();

        try
        {
            entries = await HttpClient.GetFromJsonAsync<PagedResponseKeySet<Project>>((HttpURL + RequestURL) + addDeleted);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }        
       
        // Fetch customer names for all entries
        if (entries != null)
            foreach (var entry in entries.Data)
            {
                if (!uniqueCustomerIds.Contains(entry.CustomerId))
                {
                    uniqueCustomerIds.Add(entry.CustomerId);
                }
            }

        foreach (var customerId in uniqueCustomerIds)
        {
            if (!customerNames.ContainsKey(customerId))
            {
                var customer = await FetchCustomerAsync(customerId);
                customerNames[customerId] = customer?.Name ?? "No Customer";
            }
        }
    }

    private async Task CheckboxChanged()
    {
        if (addDeleted == false)
        {
            addDeleted = true;
        }
        else
        {
            addDeleted = false;
        }

        await LoadProjects();

        StateHasChanged();
    }

    private async Task RefreshTable2()
    {
        Console.WriteLine("RefreshTable2() was called from Project");
        await LoadProjects(); 

        StateHasChanged();
    }
}

