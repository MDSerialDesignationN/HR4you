@page "/Customers"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject HttpClient HttpClient

<PageTitle>Customers</PageTitle>

<h1>Customers</h1>
<CustomerSearch Entries="entries" OnFilterChanged="UpdateFilteredEntries" />

<label>Show Deleted</label>
<input type="checkbox" checked="@addDeleted" @oninput="CheckboxChanged">

@if (entries == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <CustomersTable entries="filteredEntries" @ref="popupRef2" OnCustomerUpdated2="RefreshTable2">
    </CustomersTable>
}



@code {

    public List<Customer> entries;
    public List<Customer> filteredEntries;

    //public bool IsChecked = true;

    public bool addDeleted;

    public string RequestURL = "http://localhost:5001/api/master-data/customer/get-all?addDeleted=";

    private CustomersTable popupRef2;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && popupRef2 != null)
        {
            popupRef2.OnCustomerUpdated2 = EventCallback.Factory.Create(this, RefreshTable2);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        addDeleted = false;
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        try
        {
            entries = await HttpClient.GetFromJsonAsync<List<Customer>>(RequestURL + addDeleted);
            filteredEntries = entries;
            //Console.WriteLine(entries);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }        
    }

    private async Task CheckboxChanged()
    {
        if (addDeleted == false)
        {
            addDeleted = true;
        }
        else
        {
            addDeleted = false;
        }

        entries = await HttpClient.GetFromJsonAsync<List<Customer>>(RequestURL + addDeleted);
        StateHasChanged();
    }

    private async Task RefreshTable2()
    {
        Console.WriteLine("RefreshTable2() was called from Customers");
        await LoadCustomers(); 

        StateHasChanged();
    }

    private void UpdateFilteredEntries(List<Customer> filteredEntries)
    {
        this.filteredEntries = filteredEntries;
    }
}
