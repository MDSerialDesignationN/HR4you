@page "/Customers"
@using HR4You.Components.Tables
@using HR4You.Model.Base.Pagination
@using Newtonsoft.Json
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject HttpClient HttpClient

<PageTitle>Customers</PageTitle>
<div class="page-content min-h-[100vh] p-3 flex flex-col gap-2 select-none">

    <div class="flex flex-row justify-between">
        <h1 class="text-[2rem] font-bold flex flex-row gap-3 items-center"><i class="fa-solid fa-users"></i>Customers</h1>
    </div>


    @if (PagedResponseOffset == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <div class="flex flex-row gap-2 items-center">
            <CustomerSearch Entries="entries.Data" />
            <div class="bg-gray-200 p-[5px] rounded-[5px] border border-1 border-[#c1c1c1] flex flex-row gap-1 justify-center items-center">
                <label for="showDeleted">Show Deleted</label>
                <input class="h-4 w-4" id="showDeleted" type="checkbox" checked="@addDeleted" @oninput="CheckboxChanged">
            </div>
        </div>
        <OffsetPagination entries="PagedResponseOffset" OnPageChanged="EventCallback.Factory.Create<PagedResponseOffset<Customer>>(this, UpdateEntries)" ApiEndpoint="http://localhost:5001/api/master-data/customer/get-all-paged" />
        <div class="table-wrapper overflow-auto">

            <CustomersTable entries="PagedResponseOffset.Data" @ref="popupRef2" OnCustomerUpdated2="RefreshTable2">
            </CustomersTable>
        </div>

    }
</div>



@code {
    private const string ApiEndpointRoute = "api/master-data/customer/";
    private const string GetAllApiEndpoint = $"{ApiEndpointRoute}get-all-paged";

    public PagedResponseOffset<Customer>? PagedResponseOffset;
    public Dictionary<string, string> Parameters;

    public bool addDeleted;
    
    private CustomersTable popupRef2;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && popupRef2 != null)
        {
            popupRef2.OnCustomerUpdated2 = EventCallback.Factory.Create(this, RefreshTable2);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            addDeleted = false;
            await LoadCustomers();
        }
    }

    private async Task LoadCustomers()
    {
        try
        {
            await LocalUserStorage.Load();
            if (LocalUserStorage.UserInfo != null)
            {
                Parameters = new Dictionary<string, string>
                {
                    {nameof(addDeleted),addDeleted.ToString()}
                };
                
                var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetAllApiEndpoint, Parameters, LocalUserStorage.UserInfo.AuthToken);
                var response = await HttpClient.SendAsync(request);

                var content = await response.Content.ReadAsStringAsync();
                PagedResponseOffset = JsonConvert.DeserializeObject<PagedResponseOffset<Customer>>(content);
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }
    }

    private async Task CheckboxChanged()
    {
        if (addDeleted == false)
        {
            addDeleted = true;
        }
        else
        {
            addDeleted = false;
        }
        
        Parameters = new Dictionary<string, string>
        {
            {nameof(addDeleted),addDeleted.ToString()}
        };
        
        var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetAllApiEndpoint, Parameters, LocalUserStorage.UserInfo.AuthToken);
        var response = await HttpClient.SendAsync(request);
        
        var content = await response.Content.ReadAsStringAsync();
        PagedResponseOffset = JsonConvert.DeserializeObject<PagedResponseOffset<Customer>>(content);

        StateHasChanged();
    }

    private async Task RefreshTable2()
    {
        Console.WriteLine("RefreshTable2() was called from Customers");
        await LoadCustomers();

        StateHasChanged();
    }

    private void UpdateEntries(PagedResponseOffset<Customer> newEntries)
    {
        PagedResponseOffset = newEntries;
    }
}
