@page "/Worktime"
@using HR4You.Components.Tables
@using HR4You.Components.Other
@using HR4You.Model.Base.Pagination
@using Newtonsoft.Json
@rendermode InteractiveServer
@inject HttpClient HttpClient

<PageTitle>Worktime</PageTitle>
<div class="page">

    <div class="page-header">
        <h1><i class="fa-solid fa-calendar-days"></i>Worktime</h1>
        <UserInfo></UserInfo>

    </div>

    <div class="page-content">


        @if (PagedResponseOffset == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <div class="table-wrapper">
                <WorktimeTable entries="PagedResponseOffset.Data">
                </WorktimeTable>
            </div>

            <OffsetPagination entries="PagedResponseOffset" OnPageChanged="EventCallback.Factory.Create<PagedResponseOffset<WorkTime>>(this, UpdateEntries)" Parameters="new Dictionary<string, string>()" ApiEndpoint=@GetAllApiEndpoint />
        }
    </div>
</div>

@code {

    private const string ApiEndpointRoute = "api/master-data/work-time/";
    private const string GetAllApiEndpoint = $"{ApiEndpointRoute}get-all-paged";

    public PagedResponseOffset<WorkTime>? PagedResponseOffset;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadWorktime();
        }
    }

    private void UpdateEntries(PagedResponseOffset<WorkTime> newEntries)
    {
        PagedResponseOffset = newEntries;
    }

    private async Task LoadWorktime()
    {
        try
        {
            await LocalUserStorage.Load();
            if (LocalUserStorage.UserInfo == null)
            {
                NavigationManager.NavigateTo(NavigationManager.BaseUri);
                return;
            }

            var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetAllApiEndpoint, new Dictionary<string, string>(), LocalUserStorage.UserInfo.AuthToken);
            var response = await HttpClient.SendAsync(request);

            var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
            if (content != null) PagedResponseOffset = JsonConvert.DeserializeObject<PagedResponseOffset<WorkTime>>(content);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }
    }

}


