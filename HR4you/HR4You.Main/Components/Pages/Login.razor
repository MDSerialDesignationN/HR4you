@page "/"
@using HR4You.Components.Layout
@layout LoginLayout
@rendermode InteractiveServer

<PageTitle>HR4You Login</PageTitle>

<div class="bg-gray-100 border border-2 rounded-[15px] py-2 px-5 flex flex-col items-center gap-2 max-w-[500px]" @onkeydown="HandleKeyDown">
    <h4 class="font-monospace text-[2rem]">Login</h4>
    <div class="loginBody flex flex-col gap-2 items-center">
        <input class="w-[300px] p-1 rounded-full border border-2 font-monospace @(_isInvalid ? "border-red-500" : "")" id="Username" type="text" placeholder="Username" @bind="_username"/>
        <input class="w-[300px] p-1 rounded-full border border-2 font-monospace @(_isInvalid ? "border-red-500" : "")" id="Password" type="password" placeholder="Password" @bind="_password"/>
        <input class="bg-[#ffffff] hover:bg-gray-200 w-[fit-content] py-1 px-5 rounded-full border border-2" value="Login" type="button" @onclick="CheckLogin"/>
    </div>
</div>


@code {
    private bool _isInvalid; //TODO doesnt update right or smth => doesnt show as red when Isinvalid
    private string? _username;
    private string? _password;

    private const string ApiEndpointRoute = "api/auth/";
    private const string LogInApiEndpoint = $"{ApiEndpointRoute}log-in-user";
    private const string TokenEndOfLifeApiEndpoint = $"{ApiEndpointRoute}get-token-expiry";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await LocalUserStorage.Load();
            if (LocalUserStorage.UserInfo != null)
            {
                var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, TokenEndOfLifeApiEndpoint, new Dictionary<string, string>(), LocalUserStorage.UserInfo.AuthToken);
                var response = await HttpClient.SendAsync(request);

                if (!response.IsSuccessStatusCode)
                {
                    await LocalUserStorage.Clear();
                    return;
                }

                NavigationManager.NavigateTo("/MyTimes");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during login: {ex.Message}");
        }
    }

    private async Task CheckLogin()
    {
        try
        {
            var userParams = new Dictionary<string, string>
            {
                { "username", _username! },
                { "password", _password! }
            };
            var request = HttpQueryHandler.CreateEndpointRequest(HttpMethod.Post, LogInApiEndpoint, userParams);

            var response = await HttpClient.SendAsync(request);
            if (!response.IsSuccessStatusCode)
            {
                _isInvalid = true;
                return;
            }

            var content = await response.Content.ReadAsStringAsync();
            await LocalUserStorage.Save(content);

            _isInvalid = false;
            NavigationManager.NavigateTo("/MyTimes");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during check login: {ex.Message}");
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CheckLogin();
        }
    }
}