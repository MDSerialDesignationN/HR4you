@page "/home"
@using HR4You.Model.Base
@using HR4You.Model.Base.Pagination
@using HR4You.Components.Tables
@using HR4You.Components.Other
@using Microsoft.AspNetCore.WebUtilities
@using Newtonsoft.Json

@attribute [StreamRendering]
@inject HttpClient HttpClient
@rendermode InteractiveServer

<PageTitle>Overview</PageTitle>
<div class="page-content min-h-[100vh] p-3 flex flex-col gap-2 select-none">

    <h1 class="text-[2rem] font-bold flex flex-row gap-3 items-center"><i class="fa-solid fa-house"></i>Overview</h1>
    @if (entries == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {

        @* <HomeTable entries="entries"> *@
        @* </HomeTable> *@
        <GenericTable TItem="HourEntry" Items="entries.Data" Columns="columns"></GenericTable>


    }
</div>



@code {

    public PagedResponseKeySet<HourEntry> entries;//TODO pagination should cover this - remove from here

    private List<TableColumn<HourEntry>> columns = new List<TableColumn<HourEntry>>
    {
        new TableColumn<HourEntry> { Header = "Date", CellTemplate = item => item.Date },
        new TableColumn<HourEntry> { Header = "Start Time", CellTemplate = item => item.StartTime },
        new TableColumn<HourEntry> { Header = "End Time", CellTemplate = item => item.EndTime },
        new TableColumn<HourEntry> { Header = "Duration", CellTemplate = item => item.Duration },
        new TableColumn<HourEntry> { Header = "Project", CellTemplate = item => item.Project},
        new TableColumn<HourEntry> { Header = "Activity", CellTemplate = item => item.Type},
        new TableColumn<HourEntry> { Header = "Tag", CellTemplate = item => item.Tag}
    };


    protected override async Task OnInitializedAsync()
    {
        // try
        // {
        //     var parameters = new Dictionary<string, string>
        //     {

        //     };
            
            
            
        //     var result = await HttpClient.GetFromJsonAsync<PagedResponseKeySet<HourEntry>>("api/master-data/hour-entry/get-user-all-paged?userId=003c1ae2-acfc-495b-b91a-8cedf507568a&reference=0");
        // }
        // catch (Exception ex)
        // {
        //     Console.WriteLine($"Error fetching entries: {ex.Message}");
        // }

        try
        {
            var param = new Dictionary<string, string>
            {
                {"addDeleted", "false"},
                {"userId", "003c1ae2-acfc-495b-b91a-8cedf507568a"},
                {"reference", "0"},
                {"pagesize", "2"}
            };

            string methodName = "http://localhost:5001/api/master-data/hour-entry/get-user-all-paged";
            methodName = QueryHelpers.AddQueryString(methodName, param);

            var request = new HttpRequestMessage(HttpMethod.Get, methodName);

            var response = await HttpClient.SendAsync(request);

            var json = response.Content.ReadAsStringAsync().Result;

            entries = JsonConvert.DeserializeObject<PagedResponseKeySet<HourEntry>>(json);

            Console.WriteLine(entries);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }


    }

    private void UpdateEntries(PagedResponseKeySet<HourEntry> newEntries)
    {
        this.entries = newEntries;
    }
}

