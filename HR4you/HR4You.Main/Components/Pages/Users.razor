@page "/Users"
@using HR4You.Components.Tables
@using HR4You.Components.Other
@using HR4You.Model.Base
@using Newtonsoft.Json
@using UserInfo = HR4you.Security.UserInfo
@rendermode InteractiveServer
@inject HttpClient HttpClient

<PageTitle>User</PageTitle>
<div class="page">

    <div class="page-header">
        <h1><i class="fa-solid fa-user"></i>Users</h1>
        <UserInfo></UserInfo>

    </div>

    <div class="page-content">


        @if (entries == null)
        {
            <div class="loading-overlay">
                <div class="loading-content">
                    <svg class="animate-spin h-20 w-20 text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50">
                        <circle class="opacity-25" cx="25" cy="25" r="20" stroke="currentColor" stroke-width="5" fill="none">
                        </circle>
                        <circle class="opacity-75" cx="25" cy="25" r="20" stroke="currentColor" stroke-width="5"
                                stroke-linecap="round" fill="none" stroke-dasharray="31.415, 31.415" transform="rotate(90 25 25)">
                            <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="5s"
                                              keyTimes="0;1" values="0 25 25;360 25 25"></animateTransform>
                        </circle>
                    </svg>
                </div>
            </div>
        }
        else
        {
            <div class="page-actions">
                <SearchComponent Options1="options1" Options2="options2" />
            </div>

            <div class="table-wrapper">
                <UserTable entries="entries" @ref="popupRef2" OnUserUpdated2="RefreshTable2">
                </UserTable>
            </div>
        }
    </div>
</div>


@code {
    private const string ApiEndpointRoute = "api/auth/";
    private const string GetAllApiEndpoint = $"{ApiEndpointRoute}get-all-users";

    public List<UserInfo>? entries;
    public Dictionary<string, string> Parameters;

    //TODO create options
    public FilterOption[] options1 =
    [
    ];

    public FilterOption[] options2 =
    [
    ];

    public bool addDeleted;

    private UserTable? popupRef2;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            addDeleted = false;
            await LoadUsers();
        }

        if (firstRender && popupRef2 != null)
        {
            popupRef2.OnUserUpdated2 = EventCallback.Factory.Create(this, RefreshTable2);
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            await LocalUserStorage.Load();
            if (LocalUserStorage.UserInfo == null)
            {
                NavigationManager.NavigateTo(NavigationManager.BaseUri);
                return;
            }

            Parameters = new Dictionary<string, string>
            {
                { nameof(addDeleted), addDeleted.ToString() }
            };

            var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetAllApiEndpoint, Parameters, LocalUserStorage.UserInfo.AuthToken);
            var response = await HttpClient.SendAsync(request);

            var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
            if (content != null) entries = JsonConvert.DeserializeObject<List<UserInfo>>(content);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }
    }

    private async Task CheckboxChanged()
    {
        if (addDeleted == false)
        {
            addDeleted = true;
        }
        else
        {
            addDeleted = false;
        }

        Parameters = new Dictionary<string, string>
        {
            { nameof(addDeleted), addDeleted.ToString() }
        };

        var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetAllApiEndpoint, Parameters, LocalUserStorage.UserInfo!.AuthToken);
        var response = await HttpClient.SendAsync(request);

        var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
        if (content != null) entries = JsonConvert.DeserializeObject<List<UserInfo>>(content);

        StateHasChanged();
    }

    private async Task RefreshTable2()
    {
        Console.WriteLine("RefreshTable2() was called from Users");
        await LoadUsers();

        StateHasChanged();
    }

}