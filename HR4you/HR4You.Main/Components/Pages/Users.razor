@page "/Users"
@using HR4You.Components.Tables
@using HR4You.Components.Other
@using HR4You.Model.Base
@using Newtonsoft.Json
@using UserInfo = HR4you.Security.UserInfo
@rendermode InteractiveServer
@inject HttpClient HttpClient

<PageTitle>User</PageTitle>
<div class="page-content min-h-[100vh] p-3 flex flex-col gap-2 select-none">

    <div class="flex flex-row justify-between">
        <h1 class="text-[2rem] font-bold flex flex-row gap-3 items-center"><i class="fa-solid fa-user"></i>Users</h1>
    </div>

    <UserInfo></UserInfo>

    @if (entries == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <div class="flex flex-row gap-2 items-center">
            <SearchComponent Options1="options1" Options2="options2"/>
            <div class="bg-gray-200 p-[5px] rounded-[5px] border border-1 border-[#c1c1c1] flex flex-row gap-1 justify-center items-center">
                <label for="showDeleted">Show Deleted</label>
                <input class="h-4 w-4" id="showDeleted" type="checkbox" checked="@addDeleted" @oninput="CheckboxChanged">
            </div>
        </div>

        <div class="table-wrapper overflow-auto">
            <UserTable entries="entries" @ref="popupRef2" OnUserUpdated2="RefreshTable2">
            </UserTable>
        </div>
    }
</div>


@code {
    private const string ApiEndpointRoute = "api/auth/";
    private const string GetAllApiEndpoint = $"{ApiEndpointRoute}get-all-users";

    public List<UserInfo>? entries;
    public Dictionary<string, string> Parameters;

    //TODO create options
    public FilterOption[] options1 =
    [
    ];

    public FilterOption[] options2 =
    [
    ];

    public bool addDeleted;

    private UserTable? popupRef2;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            addDeleted = false;
            await LoadUsers();
        }
        
        if (firstRender && popupRef2 != null)
        {
            popupRef2.OnUserUpdated2 = EventCallback.Factory.Create(this, RefreshTable2);
        }
    }
    
    private async Task LoadUsers()
    {
        try
        {
            await LocalUserStorage.Load();
            if (LocalUserStorage.UserInfo == null)
            {
                NavigationManager.NavigateTo(NavigationManager.BaseUri);
                return;
            }

            Parameters = new Dictionary<string, string>
            {
                { nameof(addDeleted), addDeleted.ToString() }
            };

            var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetAllApiEndpoint, Parameters, LocalUserStorage.UserInfo.AuthToken);
            var response = await HttpClient.SendAsync(request);
            
            var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
            if (content != null) entries = JsonConvert.DeserializeObject<List<UserInfo>>(content);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }
    }

    private async Task CheckboxChanged()
    {
        if (addDeleted == false)
        {
            addDeleted = true;
        }
        else
        {
            addDeleted = false;
        }

        Parameters = new Dictionary<string, string>
        {
            { nameof(addDeleted), addDeleted.ToString() }
        };

        var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetAllApiEndpoint, Parameters, LocalUserStorage.UserInfo!.AuthToken);
        var response = await HttpClient.SendAsync(request);
        
        var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
        if (content != null) entries = JsonConvert.DeserializeObject<List<UserInfo>>(content);

        StateHasChanged();
    }

    private async Task RefreshTable2()
    {
        Console.WriteLine("RefreshTable2() was called from Users");
        await LoadUsers();

        StateHasChanged();
    }

}