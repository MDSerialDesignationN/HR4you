@page "/WorktimeConfig"
@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject IConfiguration Configuration

<PageTitle>WorktimeConfig</PageTitle>

<h1>Worktime Config</h1>

@if (entries == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <WorktimeConfigTable entries="entries" @ref="popupRef2" OnCustomerUpdated2="RefreshTable2">
    </WorktimeConfigTable>
}


@code {
    private string HttpURL;

    public string RequestURL = "/api/master-data/work-time/get-all";

    public List<WorkTime> entries;

    private WorktimeConfigTable popupRef2;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && popupRef2 != null)
        {
            popupRef2.OnCustomerUpdated2 = EventCallback.Factory.Create(this, RefreshTable2);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //Get first value from appsettings.json "Urls"
        var urls = Configuration["Urls"];
        HttpURL = urls?.Split(';').FirstOrDefault();

        await LoadWorktime();
    }

    private async Task LoadWorktime()
    {
        try
        {
            entries = await HttpClient.GetFromJsonAsync<List<WorkTime>>(HttpURL + RequestURL);
            //Console.WriteLine(entries);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }
    }

    private async Task RefreshTable2()
    {
        Console.WriteLine("RefreshTable2() was called from Project");
        await LoadWorktime();

        StateHasChanged();
    }
}


