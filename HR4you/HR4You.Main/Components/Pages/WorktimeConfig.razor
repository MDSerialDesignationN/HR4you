@page "/WorktimeConfig"
@using HR4You.Components.Tables
@using HR4You.Components.Other
@using HR4You.Model.Base
@using HR4You.Model.Base.Pagination
@using Newtonsoft.Json
@rendermode InteractiveServer
@inject HttpClient HttpClient

<PageTitle>WorktimeConfig</PageTitle>
<div class="page">

    <div class="page-header">
        <h1><i class="fa-solid fa-calendar-days"></i>Worktime</h1>
        <UserInfo></UserInfo>

    </div>

    <div class="page-content">


        @if (PagedResponseOffsetWorktime == null)
        {
            <div class="loading-overlay">
                <div class="loading-content">
                    <svg class="animate-spin h-20 w-20 text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50">
                        <circle class="opacity-25" cx="25" cy="25" r="20" stroke="currentColor" stroke-width="5" fill="none">
                        </circle>
                        <circle class="opacity-75" cx="25" cy="25" r="20" stroke="currentColor" stroke-width="5"
                                stroke-linecap="round" fill="none" stroke-dasharray="31.415, 31.415" transform="rotate(90 25 25)">
                            <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="5s"
                                              keyTimes="0;1" values="0 25 25;360 25 25"></animateTransform>
                        </circle>
                    </svg>
                </div>
            </div>
        }
        else
        {
            <div class="table-wrapper">
                <WorktimeConfigTable entries="PagedResponseOffsetWorktime.Data" @ref="popupRefWorktime2" OnWorktimeUpdated2="RefreshTable2">
                </WorktimeConfigTable>
            </div>

            <OffsetPagination entries="PagedResponseOffsetWorktime" OnPageChanged="EventCallback.Factory.Create<PagedResponseOffset<WorkTime>>(this, UpdateEntriesWorktime)" Parameters=@ParametersWorktime ApiEndpoint=@GetAllWorktimeApiEndpoint />
        }
    </div>




    <div class="page-header">
        <h1><i class="fa-solid fa-calendar-days"></i>Holiday</h1>
    </div>

    <div class="page-content">


        @if (PagedResponseOffsetHoliday == null)
        {
            <div class="loading-overlay">
                <div class="loading-content">
                    <svg class="animate-spin h-20 w-20 text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50">
                        <circle class="opacity-25" cx="25" cy="25" r="20" stroke="currentColor" stroke-width="5" fill="none">
                        </circle>
                        <circle class="opacity-75" cx="25" cy="25" r="20" stroke="currentColor" stroke-width="5"
                                stroke-linecap="round" fill="none" stroke-dasharray="31.415, 31.415" transform="rotate(90 25 25)">
                            <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="5s"
                                              keyTimes="0;1" values="0 25 25;360 25 25"></animateTransform>
                        </circle>
                    </svg>
                </div>
            </div>
        }
        else
        {
            <div class="page-actions">
                <SearchComponent Options1="options1" Options2="options2" />
                <AddHoliday></AddHoliday>

            </div>

            <div class="table-wrapper">
                <HolidayTable entriesHoliday="PagedResponseOffsetHoliday.Data" @ref="popupRefHoliday2" OnHolidayUpdated2="RefreshTable2">
                </HolidayTable>
            </div>

            <OffsetPagination entries="PagedResponseOffsetHoliday" OnPageChanged="EventCallback.Factory.Create<PagedResponseOffset<Holiday>>(this, UpdateEntriesHoliday)" Parameters=@ParametersHoliday ApiEndpoint=@GetAllHolidayApiEndpoint />
        }
    </div>

</div>



@code {
    private const string ApiWorktimeEndpointRoute = "api/master-data/work-time/";
    private const string ApiHolidayEndpointRoute = "api/master-data/holiday/";
    private const string GetAllWorktimeApiEndpoint = $"{ApiWorktimeEndpointRoute}get-all-paged";
    private const string GetAllHolidayApiEndpoint = $"{ApiHolidayEndpointRoute}get-all-paged";

    public PagedResponseOffset<WorkTime>? PagedResponseOffsetWorktime;
    public PagedResponseOffset<Holiday>? PagedResponseOffsetHoliday;
    public Dictionary<string, string> ParametersWorktime;
    public Dictionary<string, string> ParametersHoliday;

    //TODO create options
    public FilterOption[] options1 =
    [
    ];

    public FilterOption[] options2 =
    [
    ];

    public bool addDeletedWorktime;
    public bool addDeletedHoliday;

    private WorktimeConfigTable? popupRefWorktime2;
    private HolidayTable? popupRefHoliday2;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            addDeletedWorktime = false;
            addDeletedHoliday = false;

            await LoadWorktime();
            await LoadHoliday();
        }

        if (firstRender && popupRefWorktime2 != null && popupRefHoliday2 != null)
        {
            popupRefWorktime2.OnWorktimeUpdated2 = EventCallback.Factory.Create(this, RefreshTable2);
            popupRefHoliday2.OnHolidayUpdated2 = EventCallback.Factory.Create(this, RefreshTable2);
        }
    }

    private void UpdateEntriesWorktime(PagedResponseOffset<WorkTime> newEntries)
    {
        PagedResponseOffsetWorktime = newEntries;
    }

    private void UpdateEntriesHoliday(PagedResponseOffset<Holiday> newEntries)
    {
        PagedResponseOffsetHoliday = newEntries;
    }

    private async Task LoadWorktime()
    {
        try
        {
            await LocalUserStorage.Load();
            if (LocalUserStorage.UserInfo == null)
            {
                NavigationManager.NavigateTo(NavigationManager.BaseUri);
                return;
            }

            ParametersWorktime = new Dictionary<string, string>
            {
                { "addDeleted", addDeletedWorktime.ToString() }
            };

            var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetAllWorktimeApiEndpoint, ParametersWorktime, LocalUserStorage.UserInfo.AuthToken);
            var response = await HttpClient.SendAsync(request);

            var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
            if (content != null) PagedResponseOffsetWorktime = JsonConvert.DeserializeObject<PagedResponseOffset<WorkTime>>(content);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }
    }

    private async Task LoadHoliday()
    {
        try
        {
            await LocalUserStorage.Load();
            if (LocalUserStorage.UserInfo == null)
            {
                NavigationManager.NavigateTo(NavigationManager.BaseUri);
                return;
            }

            ParametersHoliday = new Dictionary<string, string>
            {
                { "addDeleted", addDeletedHoliday.ToString() }
            };

            var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetAllHolidayApiEndpoint, ParametersHoliday, LocalUserStorage.UserInfo.AuthToken);
            var response = await HttpClient.SendAsync(request);

            var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
            if (content != null) PagedResponseOffsetHoliday = JsonConvert.DeserializeObject<PagedResponseOffset<Holiday>>(content);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }
    }

    private async Task CheckboxChangedWorktime()
    {
        if (addDeletedWorktime == false)
        {
            addDeletedWorktime = true;
        }
        else
        {
            addDeletedWorktime = false;
        }

        ParametersWorktime = new Dictionary<string, string>
        {
            { "addDeleted", addDeletedWorktime.ToString() }
        };

        var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetAllWorktimeApiEndpoint, ParametersWorktime, LocalUserStorage.UserInfo!.AuthToken);
        var response = await HttpClient.SendAsync(request);

        var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
        if (content != null) PagedResponseOffsetWorktime = JsonConvert.DeserializeObject<PagedResponseOffset<WorkTime>>(content);

        StateHasChanged();
    }

    private async Task CheckboxChangedHoliday()
    {
        if (addDeletedHoliday == false)
        {
            addDeletedHoliday = true;
        }
        else
        {
            addDeletedHoliday = false;
        }

        ParametersHoliday = new Dictionary<string, string>
        {
            { "addDeleted", addDeletedHoliday.ToString() }
        };

        var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetAllHolidayApiEndpoint, ParametersHoliday, LocalUserStorage.UserInfo!.AuthToken);
        var response = await HttpClient.SendAsync(request);

        var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
        if (content != null) PagedResponseOffsetHoliday = JsonConvert.DeserializeObject<PagedResponseOffset<Holiday>>(content);

        StateHasChanged();
    }


    private async Task RefreshTable2()
    {
        Console.WriteLine("RefreshTable2() was called");
        await LoadWorktime();
        await LoadHoliday();

        StateHasChanged();
    }
}


