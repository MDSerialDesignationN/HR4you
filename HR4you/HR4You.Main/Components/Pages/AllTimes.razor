@page "/AllTimes"
@using HR4You.Components.Other
@using HR4You.Components.Tables
@using HR4You.Model.Base
@using HR4You.Model.Base.Pagination
@using Newtonsoft.Json
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>All Times</PageTitle>
<div class="page">

    <div class="page-header">
        <h1><i class="fa-solid fa-chart-area"></i>All Times</h1>
        <UserInfo></UserInfo>

    </div>

    <div class="page-content">


        @if (PagedResponseKeySet == null)
        {
            <div class="loading-overlay">
                <div class="loading-content">
                    <svg class="animate-spin h-20 w-20 text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50">
                        <circle class="opacity-25" cx="25" cy="25" r="20" stroke="currentColor" stroke-width="5" fill="none">
                        </circle>
                        <circle class="opacity-75" cx="25" cy="25" r="20" stroke="currentColor" stroke-width="5"
                                stroke-linecap="round" fill="none" stroke-dasharray="31.415, 31.415" transform="rotate(90 25 25)">
                            <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="5s"
                                              keyTimes="0;1" values="0 25 25;360 25 25"></animateTransform>
                        </circle>
                    </svg>
                </div>
            </div>
        }
        else
        {
            <div class="flex flex-row gap-2 items-center">
                <SearchComponent Options1="options1" Options2="options2" />
            </div>

            <div class="table-wrapper">
                <AllTimesTable entries="PagedResponseKeySet.Data" projectNames="projectNames" tagNames="tagNames" @ref="popupRef2" OnAllTimesUpdated2="RefreshTable2">
                </AllTimesTable>
            </div>

            <KeysetPagination entries="PagedResponseKeySet" OnPageChanged="EventCallback.Factory.Create<PagedResponseKeySet<HourEntry>>(this, UpdateEntries)" ApiEndpoint="http://localhost:5001/api/master-data/hour-entry/get-all-paged" />
        }
    </div>
</div>

@code {
    private const string ApiHourEndpointRoute = "api/master-data/hour-entry/";
    private const string ApiProjectEndpointRoute = "api/master-data/project/";
    private const string ApiTagEndpointRoute = "api/master-data/tag/";
    private const string GetAllHourApiEndpoint = $"{ApiHourEndpointRoute}get-all-paged";
    private const string GetProjectApiEndpoint = $"{ApiProjectEndpointRoute}get";
    private const string GetTagApiEndpoint = $"{ApiTagEndpointRoute}get";

    public PagedResponseKeySet<HourEntry>? PagedResponseKeySet;
    public Dictionary<string, string> Parameters;

    public FilterOption[] options1 =
    [
        new() { Icon = "<i class='fa-solid fa-calendar-days'></i>", Name = "Date", InputType = "date" },
    new() { Icon = "<i class='fa-regular fa-clock'></i>", Name = "StartTime", InputType = "time" },
    new() { Icon = "<i class='fa-regular fa-clock'></i>", Name = "EndTime", InputType = "time" },
    new() { Icon = "<i class='fa-solid fa-timeline'></i>", Name = "Duration", InputType = "number" },
    new() { Icon = "<i class='fa-solid fa-tasks'></i>", Name = "Type", InputType = "select", Options = Enum.GetValues<ActivityType>().Select(e => e.ToString()).ToList() }
    ];

    public FilterOption[] options2 =
    [
        new() { Icon = "<i class='fa-solid fa-id-card'></i>", Name = "UserId", InputType = "string" },
    new() { Icon = "<i class='fa-solid fa-diagram-project'></i>", Name = "ProjectId", InputType = "string" },
    new() { Icon = "<i class='fa-solid fa-tag'></i>", Name = "TagId", InputType = "string" },
    new() { Icon = "<i class='fa-solid fa-mug-hot'></i>", Name = "IsHoliday", InputType = "checkbox" },
    new() { Icon = "<i class='fa-solid fa-money-bill'></i>", Name = "IsBillable", InputType = "checkbox" },
    new() { Icon = "<i class='fa-solid fa-trash'></i>", Name = "Deleted", InputType = "checkbox" }
    ];

    public bool addDeleted;

    private AllTimesTable? popupRef2;

    public Dictionary<int, string> projectNames = new();

    public Dictionary<int?, string> tagNames = new();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            addDeleted = false;
            await LoadAllTimes();
        }

        if (firstRender && popupRef2 != null)
        {
            popupRef2.OnAllTimesUpdated2 = EventCallback.Factory.Create(this, RefreshTable2);
        }
    }

    private void UpdateEntries(PagedResponseKeySet<HourEntry> newEntries)
    {
        PagedResponseKeySet = newEntries;
    }

    private async Task LoadAllTimes()
    {
        var uniqueProjectIds = new List<int>();
        var uniqueTagIds = new List<int>();

        try
        {
            await LocalUserStorage.Load();
            if (LocalUserStorage.UserInfo == null)
            {
                NavigationManager.NavigateTo(NavigationManager.BaseUri);
                return;
            }

            Parameters = new Dictionary<string, string>
            {
                { nameof(addDeleted), addDeleted.ToString() }
            };

            var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetAllHourApiEndpoint, Parameters, LocalUserStorage.UserInfo.AuthToken);
            var response = await HttpClient.SendAsync(request);

            var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
            if (content != null) PagedResponseKeySet = JsonConvert.DeserializeObject<PagedResponseKeySet<HourEntry>>(content);

            // Fetch project and tag names for all entries
            if (PagedResponseKeySet != null)
                foreach (var entry in PagedResponseKeySet.Data)
                {
                    if (!uniqueProjectIds.Contains(entry.ProjectId))
                    {
                        uniqueProjectIds.Add(entry.ProjectId);
                    }
                    else if (!uniqueTagIds.Contains(entry.TagId.GetValueOrDefault()))
                    {
                        uniqueTagIds.Add(entry.TagId.GetValueOrDefault());
                    }
                }

            foreach (var projectId in uniqueProjectIds)
            {
                if (!projectNames.ContainsKey(projectId))
                {
                    var project = await FetchProjectAsync(projectId);
                    projectNames[projectId] = project?.Name ?? "No Project";
                }
            }

            foreach (var tagId in uniqueTagIds)
            {
                if (!tagNames.ContainsKey(tagId))
                {
                    var tag = await FetchTagAsync(tagId);
                    tagNames[tagId] = tag?.Name ?? "No Tag";
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }
    }

    private async Task<Project?> FetchProjectAsync(int projectId)
    {
        try
        {
            await LocalUserStorage.Load();
            if (LocalUserStorage.UserInfo == null)
            {
                NavigationManager.NavigateTo(NavigationManager.BaseUri);
                return null;
            }

            Parameters = new Dictionary<string, string>
            {
                {"id", projectId.ToString()},
                { nameof(addDeleted), addDeleted.ToString() }
            };

            var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetProjectApiEndpoint, Parameters, LocalUserStorage.UserInfo.AuthToken);
            var response = await HttpClient.SendAsync(request);

            var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
            if (content != null) return JsonConvert.DeserializeObject<Project>(content)!;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching project id {projectId} Error: {ex.Message}");
            return null;
        }

        return null;
    }

    private async Task<Tag?> FetchTagAsync(int tagId)
    {
        try
        {
            await LocalUserStorage.Load();
            if (LocalUserStorage.UserInfo == null)
            {
                NavigationManager.NavigateTo(NavigationManager.BaseUri);
                return null;
            }

            Parameters = new Dictionary<string, string>
            {
                {"id", tagId.ToString()},
                { nameof(addDeleted), addDeleted.ToString() }
            };

            var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetTagApiEndpoint, Parameters, LocalUserStorage.UserInfo.AuthToken);
            var response = await HttpClient.SendAsync(request);

            var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
            if (content != null) return JsonConvert.DeserializeObject<Tag>(content)!;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching project id {tagId} Error: {ex.Message}");
            return null;
        }

        return null;
    }

    private async Task CheckboxChanged()
    {
        if (addDeleted == false)
        {
            addDeleted = true;
        }
        else
        {
            addDeleted = false;
        }

        Parameters = new Dictionary<string, string>
        {
            { nameof(addDeleted), addDeleted.ToString() }
        };

        var request = HttpQueryHandler.CreateEndpointRequestWithJwt(HttpMethod.Get, GetAllHourApiEndpoint, Parameters, LocalUserStorage.UserInfo!.AuthToken);
        var response = await HttpClient.SendAsync(request);

        var content = await HttpQueryHandler.ProcessHttpResponse(NavigationManager, response);
        if (content != null) PagedResponseKeySet = JsonConvert.DeserializeObject<PagedResponseKeySet<HourEntry>>(content);

        StateHasChanged();
    }

    private async Task RefreshTable2()
    {
        Console.WriteLine("RefreshTable2() was called from AllTimes");
        await LoadAllTimes();

        StateHasChanged();
    }

}