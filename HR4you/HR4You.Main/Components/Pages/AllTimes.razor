@page "/AllTimes"
@using HR4You.Model.Base
@using HR4You.Model.Base.Pagination
@attribute [StreamRendering]
@inject HttpClient HttpClient
@rendermode InteractiveServer

<PageTitle>All Times</PageTitle>
<div class="page-content min-h-[100vh] p-3 flex flex-col gap-2">
    <div class="flex flex-row justify-between">
        <h1 class="text-[2rem] font-bold flex flex-row gap-3 items-center"><i class="fa-solid fa-chart-area"></i>All Times</h1>
        <div class="bg-[whitesmoke] flex flex gap-3 items-center p-3 rounded-[10px] border border-2 border-[#c1c1c1]">
            <div class="user-info">
                <p class="font-bold p-1">Thel Vadam'ee</p>

            </div>
            <div class="user-actions">
                <a class="cursor-pointer text-red-500 p-1 rounded-[5px] transition-all duration-500 hover:bg-gray-300">Logout</a>
            </div>
        </div>
    </div>

    @if (entries == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        @* <HourEntrySearch Entries="entries.Data" /> *@
        <SearchComponent Options1="options1" Options2="options2" />

        <div class="table-wrapper overflow-auto">
            <AllTimesTable entries="entries.Data"></AllTimesTable>
        </div>
        <KeysetPagination entries="entries" OnPageChanged="EventCallback.Factory.Create<PagedResponseKeySet<HourEntry>>(this, UpdateEntries)" ApiEndpoint="http://localhost:5001/api/master-data/hour-entry/get-all-paged" />
    }
</div>

@code {
    public PagedResponseKeySet<HourEntry>? entries;
    public FilterOption[] options1 = new FilterOption[] {
        new FilterOption{ Icon = "<i class='fa-solid fa-calendar-days'></i>", Name = "Date", InputType = "date" },
        new FilterOption{ Icon = "<i class='fa-regular fa-clock'></i>", Name = "StartTime", InputType = "time" },
        new FilterOption{ Icon = "<i class='fa-regular fa-clock'></i>", Name = "EndTime", InputType = "time" },
        new FilterOption{ Icon = "<i class='fa-solid fa-timeline'></i>", Name = "Duration", InputType = "number" },
        new FilterOption{ Icon = "<i class='fa-solid fa-tasks'></i>", Name = "Type", InputType = "select", Options = Enum.GetValues<ActivityType>().Select(e => e.ToString()).ToList() },
    };
    public FilterOption[] options2 = new FilterOption[] {
        new FilterOption{ Icon = "<i class='fa-solid fa-id-card'></i>", Name = "UserId", InputType = "string" },
        new FilterOption{ Icon = "<i class='fa-solid fa-diagram-project'></i>", Name = "ProjectId", InputType = "string" },
        new FilterOption{ Icon = "<i class='fa-solid fa-tag'></i>", Name = "TagId", InputType = "string" },
        new FilterOption{ Icon = "<i class='fa-solid fa-mug-hot'></i>", Name = "IsHoliday", InputType = "checkbox" },
        new FilterOption{ Icon = "<i class='fa-solid fa-money-bill'></i>", Name = "IsBillable", InputType = "checkbox" },
        new FilterOption{ Icon = "<i class='fa-solid fa-trash'></i>", Name = "Deleted", InputType = "checkbox" },
    };



    // <div class="OptionRow">
    //     <span><i class="fa-solid fa-mug-hot"></i>Holiday</span><input type="checkbox" name="Holiday" @bind="holiday" @bind:event="oninput" />
    // </div>
    // <div class="OptionRow">
    //     <span><i class="fa-solid fa-money-bill"></i>Billable</span><input type="checkbox" name="Billable" @bind="billable" @bind:event="oninput" />
    // </div>
    // <div class="OptionRow">
    //     <span><i class="fa-solid fa-trash"></i>Deleted</span><input type="checkbox" name="Deleted" @bind="deleted" @bind:event="oninput" />
    // </div>

    protected override async Task OnInitializedAsync()
    {
        try
        {
            entries = await HttpClient.GetFromJsonAsync<PagedResponseKeySet<HourEntry>>("http://localhost:5001/api/master-data/hour-entry/get-all-paged?reference=0&pageSize=10");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }
    }

    private void UpdateEntries(PagedResponseKeySet<HourEntry> newEntries)
    {
        this.entries = newEntries;
        // if (entries != null)
        // {
        //     entries = new PagedResponseKeySet<HourEntry>(newEntries, entries.Reference);
        // }
    }

}