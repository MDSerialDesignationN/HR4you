@page "/AllTimes"
@attribute [StreamRendering]
@inject HttpClient HttpClient
@rendermode InteractiveServer

<PageTitle>All Times</PageTitle>
@* <div class="content"> *@
    <h1>All Times</h1>

    <HourEntrySearch Entries="entries" OnFilterChanged="UpdateFilteredEntries" />

    @if (filteredEntries == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <div class="table-wrapper">
            <AllTimesTable entries="filteredEntries"></AllTimesTable>
        </div>
    }
@* </div> *@

@code {
    public List<HourEntry> entries;
    public List<HourEntry> filteredEntries;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            entries = await HttpClient.GetFromJsonAsync<List<HourEntry>>("http://localhost:5001/api/master-data/hour-entry/get-all-paged?reference=0&pageSize=10");
            filteredEntries = entries.Slice(1, 10);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }
    }

    private void UpdateFilteredEntries(List<HourEntry> filteredEntries)
    {
        this.filteredEntries = filteredEntries;
    }
}