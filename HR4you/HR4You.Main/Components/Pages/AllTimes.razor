@page "/AllTimes"
@using HR4You.Model.Base
@using HR4You.Model.Base.Pagination
@attribute [StreamRendering]
@inject HttpClient HttpClient
@rendermode InteractiveServer

<PageTitle>All Times</PageTitle>
<div class="page-content min-h-[100vh] p-3 flex flex-col gap-2">
    <div class="flex flex-row justify-between">
        <h1 class="text-[2rem] font-bold flex flex-row gap-3 items-center"><i class="fa-solid fa-chart-area"></i>All Times</h1>
        <div class="bg-[whitesmoke] flex flex gap-3 items-center p-3 rounded-[10px] border border-2 border-[#c1c1c1]">
            <div class="user-info">
                <p class="font-bold p-1">Thel Vadam'ee</p>

            </div>
            <div class="user-actions">
                <a class="cursor-pointer text-red-500 p-1 rounded-[5px] transition-all duration-500 hover:bg-gray-300">Logout</a>
            </div>
        </div>
    </div>

    <label>Show Deleted</label>
    <input type="checkbox" checked="@addDeleted" @oninput="CheckboxChanged">

    @if (entries == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <SearchComponent Options1="options1" Options2="options2" />

        <div class="table-wrapper overflow-auto">
            <AllTimesTable entries="entries.Data" projectNames="projectNames" tagNames="tagNames" @ref="popupRef2" OnAllTimesUpdated2="RefreshTable2">
            </AllTimesTable>
        </div>
        <KeysetPagination entries="entries" OnPageChanged="EventCallback.Factory.Create<PagedResponseKeySet<HourEntry>>(this, UpdateEntries)" ApiEndpoint="http://localhost:5001/api/master-data/hour-entry/get-all-paged" />
    }
</div>

@code {
    public PagedResponseKeySet<HourEntry>? entries;
    public FilterOption[] options1 =
    [
        new() { Icon = "<i class='fa-solid fa-calendar-days'></i>", Name = "Date", InputType = "date" },
    new() { Icon = "<i class='fa-regular fa-clock'></i>", Name = "StartTime", InputType = "time" },
    new() { Icon = "<i class='fa-regular fa-clock'></i>", Name = "EndTime", InputType = "time" },
    new() { Icon = "<i class='fa-solid fa-timeline'></i>", Name = "Duration", InputType = "number" },
    new() { Icon = "<i class='fa-solid fa-tasks'></i>", Name = "Type", InputType = "select", Options = Enum.GetValues<ActivityType>().Select(e => e.ToString()).ToList() }
    ];
    public FilterOption[] options2 =
    [
        new() { Icon = "<i class='fa-solid fa-id-card'></i>", Name = "UserId", InputType = "string" },
    new() { Icon = "<i class='fa-solid fa-diagram-project'></i>", Name = "ProjectId", InputType = "string" },
    new() { Icon = "<i class='fa-solid fa-tag'></i>", Name = "TagId", InputType = "string" },
    new() { Icon = "<i class='fa-solid fa-mug-hot'></i>", Name = "IsHoliday", InputType = "checkbox" },
    new() { Icon = "<i class='fa-solid fa-money-bill'></i>", Name = "IsBillable", InputType = "checkbox" },
    new() { Icon = "<i class='fa-solid fa-trash'></i>", Name = "Deleted", InputType = "checkbox" }
    ];


    private string HttpURL;

    public string RequestURL = "/api/master-data/hour-entry/get-all?addDeleted=";

    public bool addDeleted;

    private AllTimesTable popupRef2;

    public Dictionary<int, string> projectNames = new();

    public Dictionary<int?, string> tagNames = new();

    public string RequestURLProject = "/api/master-data/project/get?addDeleted=true&Id=";

    public string RequestURLTag = "/api/master-data/tag/get?addDeleted=true&Id=";

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && popupRef2 != null)
        {
            popupRef2.OnAllTimesUpdated2 = EventCallback.Factory.Create(this, RefreshTable2);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        addDeleted = false;
        await LoadAllTimes();
    }

    private void UpdateEntries(PagedResponseKeySet<HourEntry> newEntries)
    {
        entries = newEntries;
    }

    private async Task LoadAllTimes()
    {
        List<int> uniqueProjectIds = new List<int>();
        List<int> uniqueTagIds = new List<int>();

        try
        {
            entries = await HttpClient.GetFromJsonAsync<PagedResponseKeySet<HourEntry>>((HttpURL + RequestURL) + addDeleted);
            Console.WriteLine((HttpURL + RequestURL) + addDeleted);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching entries: {ex.Message}");
        }

        // Fetch project and tag names for all entries
        if (entries != null)
            foreach (var entry in entries.Data)
            {
                if (!uniqueProjectIds.Contains(entry.ProjectId))
                {
                    uniqueProjectIds.Add(entry.ProjectId);
                }
                else if (!uniqueTagIds.Contains(entry.TagId.GetValueOrDefault()))
                {
                    uniqueTagIds.Add(entry.TagId.GetValueOrDefault());
                }
            }

        foreach (var projectId in uniqueProjectIds)
        {
            if (!projectNames.ContainsKey(projectId))
            {
                var project = await FetchProjectAsync(projectId);
                projectNames[projectId] = project?.Name ?? "No Project";
            }
        }

        foreach (var tagId in uniqueTagIds)
        {
            if (!tagNames.ContainsKey(tagId))
            {
                var tag = await FetchTagAsync(tagId);
                tagNames[tagId] = tag?.Name ?? "No Tag";
            }
        }
    }

    private async Task<Project> FetchProjectAsync(int projectId)
    {
        try
        {
            return await HttpClient.GetFromJsonAsync<Project>((HttpURL + RequestURLProject) + projectId);
        }
        catch
        {
            return null;
        }
    }

    private async Task<Tag> FetchTagAsync(int tagId)
    {
        try
        {
            return await HttpClient.GetFromJsonAsync<Tag>((HttpURL + RequestURLTag) + tagId);
        }
        catch
        {
            return null;
        }
    }

    private async Task CheckboxChanged()
    {
        if (addDeleted == false)
        {
            addDeleted = true;
        }
        else
        {
            addDeleted = false;
        }

        entries = await HttpClient.GetFromJsonAsync<PagedResponseKeySet<HourEntry>>((HttpURL + RequestURL) + addDeleted);
        StateHasChanged();
    }

    private async Task RefreshTable2()
    {
        Console.WriteLine("RefreshTable2() was called from Project");
        await LoadAllTimes();

        StateHasChanged();
    }

}